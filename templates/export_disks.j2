- hosts: export
  gather_facts: False
  vars:
    project: "{{ project_name }}"
    ibm_api_key: "{{ ibm_api_key }}"
    ibm_bucket_name: "{{ ibm_bucket_name }}"
    ibm_endpoint: "{{ ibm_endpoint }}"
    ibm_auth_endpoint: "{{ ibm_auth_endpoint }}"
    ibm_resource_id: "{{ ibm_resource_id }}"
    images:
      {% for disk in images %}
      - ['{{ disk.type }}', '{{ disk.device }}', '{{ disk.name }}', '{{ disk.size }}']  
      {% endfor %}
    output_dir: "/root/images/{{ project_name }}"
{% raw %}
  tasks:
    - name: Wait 600 seconds for target connection to become reachable/usable
      wait_for_connection:
        timeout: 1200

    - name: Check if host boot correctly
      shell: mount |grep sda
      register: mount_opt
      ignore_errors: true

    - name: Rebooting server
      reboot:
      when: mount_opt.rc == 1

    - name: Wait 600 seconds for target connection to become reachable/usable
      wait_for_connection:
      when: mount_opt.rc == 1

    - name: Remove directory /root/images
      file:
        path: "/root/images"
        state: absent

    - name: Install qemu-img
      yum:
        name: qemu-img
        state: present

    - name: Install ibm-cos-sdk using pip
      pip:
        name: ibm-cos-sdk
        state: present

    - name: Convert and upload images
      when: ibm_api_key != "" and ibm_bucket_name != ""
      block:
        - name: Convert and upload images
          convert_images:
            ibm_endpoint: "{{ ibm_endpoint }}"
            ibm_auth_endpoint: "{{ ibm_auth_endpoint }}"
            ibm_api_key: "{{ ibm_api_key }}"
            ibm_resource_id: "{{ ibm_resource_id }}"
            bucket: "{{ ibm_bucket_name }}"
            blueprint: "{{ project }}"
            output_dir: "{{ output_dir }}"
            mode: "upload"
            images: "{{ images }}"
            overwrite: "{{ overwrite_image | default(false) |bool }}"

    - name: Remove from the VM the directory {{ output_dir}}
      file:
        path: "{{ output_dir }}"
        state: absent

#    - name: Shutdown the VM
#      command: shutdown -h now
#      ignore_errors: true
#      tags:
#      - shutdown
{% endraw %}

- hosts: localhost
  gather_facts: False
  become: false
  connection: local
  vars:
    project_name: "{{ project_name }}"
    heat_repository: git@github.com:redhat-gpe/novello-templates.git
    git_dir: "../../novello-templates"
    template_dir: "{% raw %}{{ git_dir }}{% endraw %}/heat-templates/{{ project_name }}"
{% raw %}
  tasks:
    - name: Clone heat-templates repository
      git:
        repo: "{{ heat_repository }}"
        dest: "{{ git_dir}}"
        version: master
        force: true

    - name: Create {{ template_dir }} directory
      file:
        path: "{{ template_dir }}"
        state: directory
        recurse: true
      register: create_dir

    - name: Copy heat-templates to {{ template_dir }}
      copy:
        src: "{{ item }}"
        dest: "{{ template_dir }}"
      loop:
        - stack_admin.yaml
        - stack_user.yaml
      register: copy_templates
      when: create_dir.changed

    - name: Add heat templates to git
      shell: cd "{{ git_dir }}" && git add .
      when: copy_templates is changed

    - name: Commit heat templates for {{ project_name }}
      environment:
        GPG_TTY: ""
      shell: cd "{{ git_dir }}" && git commit -m 'Update heat {{ project_name }}'
      when: copy_templates is changed

    - name: Pushing modifications
      shell: cd "{{ git_dir }}" && git push
      when: copy_templates is changed

{% endraw %}
