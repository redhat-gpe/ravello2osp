- hosts: export
  gather_facts: False
  vars:
    project_name: "{{ project_name }}"
    ibm_api_key: "{{ ibm_api_key }}"
    ibm_bucket_name: "{{ ibm_bucket_name }}"
    ibm_endpoint: "{{ ibm_endpoint }}"
    ibm_auth_endpoint: "{{ ibm_auth_endpoint }}"
    ibm_resource_id: "{{ ibm_resource_id }}"
    images:
      {% for disk in images %}
      - ['{{ disk.type }}', '{{ disk.device }}', '{{ disk.name }}', '{{ disk.size }}']  
      {% endfor %}
    output_dir: "/root/images/{{ project_name }}"
{% raw %}
  tasks:
    - name: Create in the VM the directory {{ output_dir}}
      file:
        path: "{{ output_dir }}"
        recurse: true
        state: directory

    - name: Install qemu-img
      yum:
        name: qemu-img
        state: present

    - name: Install ibm-cos-sdk using pip
      pip:
        name: ibm-cos-sdk
        state: present

    - name: List bucket content
      when: ibm_api_key != "" and ibm_bucket_name != ""
      block:
        - name: Get bucket content from IBM COS
          ibm_cos:
            ibm_endpoint: "{{ ibm_endpoint }}"
            ibm_auth_endpoint: "{{ ibm_auth_endpoint }}"
            ibm_api_key: "{{ ibm_api_key }}"
            ibm_resource_id: "{{ ibm_resource_id }}"
            mode: list
            bucket: "{{ ibm_bucket_name }}"
          register: bucket_content

        - set_fact:
            content: "{{ bucket_content.s3_keys }}"

        - name: Convert the disks attached to qcow2
          command: qemu-img convert -O qcow2 -p /dev/{{ item[1] }} "{{ output_dir }}/{{ item[2] }}"
          loop:  "{{ images }}"
          loop_control:
            label: "{{project_name}}/{{ item[2] }}"
          when: "{{ project_name+'/'+item[2]+'.qcow2' not in content }}"

        - name: Upload file to bucket
          ibm_cos:
            ibm_endpoint: "{{ ibm_endpoint }}"
            ibm_auth_endpoint: "{{ ibm_auth_endpoint }}"
            ibm_api_key: "{{ ibm_api_key }}"
            ibm_resource_id: "{{ ibm_resource_id }}"
            mode: put
            bucket: "{{ ibm_bucket_name }}"
            object: "{{ project_name }}/{{ item[2] }}.qcow2"
            src: "{{ output_dir }}/{{ item[2] }}"
          loop: "{{ images }}"
          loop_control:
            label: "{{project_name}}/{{ item[2] }}"
          when: "{{ project_name+'/'+item[2]+'.qcow2' not in content }}"

    - name: Remove from the VM the directory {{ output_dir}}
      file:
        path: "{{ output_dir }}"
        state: absent

    - name: Shutdown the VM
      command: shutdown -h now
      ignore_errors: true
      tags:
      - shutdown
{% endraw %}
