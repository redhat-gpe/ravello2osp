- hosts: localhost
  gather_facts: false
  vars:
    project: "OPTLC-OSPD_Basic-v13.7-bp"
    username: "{{ guid }}"
    cf_user: admin
    cf_pw: NjA1YWIxYmU4OTFhN2Y4MzM4ZTlhZWYw
    service_id: 3    
    api_uri: https://169.47.15.178/
    provider_id: 3
    max_retries: 10
    retry_interval: 20
  vars_prompt:
    - prompt: "GUID for the project?"
      name: guid
      private: no

    - prompt: "USER for the project?"
      name: user
      private: no

    - prompt: "ID for the external network"
      name: external
      private: no

  tasks:
    - set_fact: project_name="{{ project | replace('-bp','') | replace('OPTLC', 'OTLC-LAB-' + user) }}-{{ guid }}"
    - set_fact: userpw="{{ lookup('password', '/dev/null length=20 chars=ascii_letters') }}"
    - debug: var=service_id

    - name: Get CloudForms auth_token
      uri:
        url: "{{ api_uri }}/api/auth"
        method: GET
        validate_certs: no
        user: "{{ cf_user }}"
        password: "{{ cf_pw }}"
        headers:
          accept: "application/json"
        return_content: yes
      register: uri_output

    - set_fact: auth_token="{{ uri_output.json.auth_token }}"

    - name: Set the Provider URL
      set_fact:
        provider_url: "{{ api_uri }}/api/providers/{{ provider_id }}"

    - debug: var=provider_url

    - name: Set the Service URL
      set_fact:
        svc_url: "/api/services/{{ service_id }}"
    - debug: var=svc_url


    - debug: var=userpw

    - command: "date +%s"
      register: date


    - name: Check if project exists
      os_project_facts:
        auth: 
         auth_url: http://169.47.15.163:5000/v3
         project_name: admin
         username: admin
         password: XdmdfJKt4cv9zpyn2Wvdr827b
         user_domain_name: Default
         project_domain_name: Default
        name: "{{ project_name }}"
      register: project_exists

    - fail: msg="Project exists, can't continue"
      when: project_exists.ansible_facts.openstack_projects


    - name: Create project and assign permission
      os_stack:
        auth: 
         auth_url: http://169.47.15.163:5000/v3
         project_name: admin
         username: admin
         password: XdmdfJKt4cv9zpyn2Wvdr827b
         user_domain_name: Default
         project_domain_name: Default
        name: "create-project-{{project_name}}"
        template: "stack_admin.yaml"
        parameters:
          project_name: "{{ project_name }}" 
          project_description: "created:{{ date.stdout }}"
          project_user: "{{ username }}"
          project_userpw: "{{ userpw }}"

    - debug: var=userpw
    - debug: var=username

    - name: auth
      register: objects
      os_auth:
        auth: 
         auth_url: http://169.47.15.163:5000/v3
         project_name: "{{ project_name }}"
         username: "{{ username }}"
         password: "{{ userpw }}"
         user_domain_name: Default
         project_domain_name: Default
 
    - name: Create objects inside the project
      register: objects
      os_stack:
        auth: 
         auth_url: http://169.47.15.163:5000/v3
         project_name: "{{ project_name }}"
         username: "{{ username }}"
         password: "{{ userpw }}"
         user_domain_name: Default
         project_domain_name: Default
        name: "create-objects-{{project_name}}"
        template: "stack_user.yaml"
        parameters:
          project_name: "{{ project_name }}" 
          public_net_id: "{{ external }}" 
          userdata: ""
    - set_fact: fip="{{ objects.stack.outputs[0].output_value }}"
    - debug: msg="Floating IP {{ fip }} assigned"
    - uri:
       url: https://api.softlayer.com/rest/v3/SoftLayer_Dns_Domain/2800309/createARecord
       user: josegonz
       password: 2c887f0eb0dcc6b2720b488322775fac3b0cf59c77c7364cbff65acaaf307d25 
       method: POST
       body_format: json
       body: {'parameters':["workstation-{{guid}}","{{ fip }}","3600"]}
    - debug: msg="DNS workstation-{{ guid }}.iad.opentlc.com assigned"

    - set_fact: ospvms="{{ objects.stack.outputs[1].output_value }}"

    - name: Refresh provider in CloudForms
      uri:
        url: "{{ provider_url }}"
        method: POST
        body:
          action: refresh
        body_format: json
        validate_certs: False
        headers:
          X-Auth-Token: "{{ auth_token }}"
          Content-Type: "application/json" 
        status_code: 200
      register: output
    - debug: var=output

    - name: set the task href
      set_fact:
        task_url: "{{ output.json.task_href}}"
    - debug: var=task_url

    - name: Wait for the refresh to end
      uri:
        url: "{{ task_url }}"
        method: GET
        validate_certs: False
        headers:
          X-Auth-Token: "{{ auth_token }}"
          Content-Type: "application/json" 
        status_code: 200
      register: task_result
      until: task_result.json.state == 'Finished' or task_result.json.status == 'Error'
      failed_when: task_result.json.status == 'Error'
      retries: "{{max_retries}}"
      delay: "{{retry_interval}}"
    - debug: var=task_result

    - set_fact: filter=""
    - set_fact: filter="{{ filter}}&filter[]=or%20uid_ems={{ item }}"
      loop: "{{ospvms}}"
    
    - set_fact: find_vm_url="{{ api_uri }}/api/vms?expand=resources&attributes=href,uid_ems&{{ filter }}"
    - debug: var=find_vm_url

    - name: Call to CloudForms to find href for new_vm_uuid
      uri:
        url: "{{ find_vm_url }}"
        method: GET
        validate_certs: no
        headers:
           X-Auth-Token: "{{ auth_token }}"
           Content-Type: "application/json"
        body_format: json
        return_content: yes
      register: token_output

    - debug: var=token_output

    - name: Create an array of vms
      set_fact:
        vms: "{{ vms|default([]) + [ { 'href': svc_url, 'resource':  { 'href': item.href } } ] }}"
      with_items:
        - "{{ token_output.json.resources }}"

    - name: Change owner of the VM
      uri:
        url: "{{ item.href }}"
        method: POST
        body_format: json
        body:
          action: set_owner
          resource : { 'resource': { 'owner': '{{ user }}' } }
        validate_certs: False
        headers:
          X-Auth-Token: "{{ auth_token }}"
          Content-Type: "application/json"
        status_code: 200
      register: output
      with_items:
        - "{{ token_output.json.resources }}"

    - debug: var=vms
    
    - name: Register vm with the service
      uri:
        url: "{{ api_uri }}/api/services"
        method: POST
        body_format: json
        body:
          action: add_resource
          resources : "{{ vms }}"
        validate_certs: False
        headers:
          X-Auth-Token: "{{ auth_token }}"
          Content-Type: "application/json"
        status_code: 200
      register: output

    - debug: var=output.json.results[0].success
