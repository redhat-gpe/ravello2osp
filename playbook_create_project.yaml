- hosts: localhost
  gather_facts: false
  vars:
    project: "OPTLC-OSPD_Basic-v13.7-bp"
    api_user: "{{ guid }}"
  vars_prompt:
    - prompt: "Name of the BP"
      name: project
      private: no

    - prompt: "GUID for the project?"
      name: guid
      private: no

    - prompt: "USER for the project?"
      name: user
      private: no

    - prompt: "ID for the external network"
      name: external
      private: no

    - prompt: "Directory with stack_admin.yaml and stack_user.yaml"
      name: directory
      private: no

    - prompt: "OSP Auth url"
      name: auth_url
      private: no

    - prompt: "OSP Auth user"
      name: auth_user
      private: no

    - prompt: "OSP Auth password"
      name: auth_pass
      private: no

  tasks:
    - set_fact: project_name="{{ project | replace('-bp','') | replace('OPTLC', 'OTLC-LAB-' + user) }}-{{ guid }}"

    - set_fact: api_pass="{{ lookup('password', '/dev/null length=20 chars=ascii_letters') }}"

    - name: Check if project exists
      os_project_facts:
        auth: 
         auth_url: "{{ auth_url }}"
         project_name: admin
         username: "{{ auth_user }}"
         password: "{{ auth_pass }}"
         user_domain_name: Default
         project_domain_name: Default
        name: "{{ project_name }}"
      register: project_exists

    - fail: msg="Project exists, can't continue"
      when: project_exists.ansible_facts.openstack_projects

    - command: "date +%s"
      register: date

    - name: Create project and assign permission
      register: stack_admin_output
      os_stack:
        auth: 

         auth_url: "{{ auth_url }}"
         project_name: admin
         username: "{{ auth_user }}"
         password: "{{ auth_pass }}"
         user_domain_name: Default
         project_domain_name: Default
        name: "create-project-{{project_name}}"
        template: "{{ directory }}/stack_admin.yaml"
        parameters:
          project_name: "{{ project_name }}" 
          project_guid: "{{ guid }}" 
          project_description: "created:{{ date.stdout }}"
          project_api_user: "{{ api_user }}"
          project_api_pass: "{{ api_pass }}"
          blueprint: "{{ project }}"

    - name: Create objects inside the project
      register: stack_user_output
      os_stack:
        auth: 
         auth_url: "{{ auth_url }}"
         project_name: "{{ project_name }}"
         username: "{{ api_user }}"
         password: "{{ api_pass }}"
         user_domain_name: Default
         project_domain_name: Default
        name: "create-objects-{{project_name}}"
        template: "{{ directory }}/stack_user.yaml"
        parameters:
          project_name: "{{ project_name }}" 
          public_net_id: "{{ external }}" 
          api_url: "{{ auth_url }}"
          api_user: "{{ api_user }}"
          api_pass: "{{ api_pass }}"
          project_guid: "{{ guid }}"
    #- set_fact: fip="{{ objects.stack.outputs[0].output_value }}"
    #- debug: msg="Floating IP {{ fip }} assigned"
    #
    - name: Save infra_key content
      set_fact:
        infra_private_key_content: "{{ stack_user_output | json_query(query) }}"
      vars:
        query: "stack.outputs[?@.output_key=='openstack_project_infra_key'].output_value|[0]"

    - name: Set infra_ssh_key path
      set_fact:
        infra_ssh_key: "{{ directory}}/{{ guid }}_infra_ssh_key.pem"

    - name: Copy infra_key content to output_dir
      copy:
        dest: "{{ infra_ssh_key }}"
        content: "{{ infra_private_key_content }}"
        mode: 0600

    - debug: var=stack_user_output

    - name: print out user.info
      debug:
        msg: "user.info: ssh -i {{ directory}}/{{ guid }}_infra_ssh_key.pem cloud-user@{{ item.output_value }}"
      when: '"_fip" in item.output_key'
      loop:
        "{{ stack_user_output.stack.outputs }}"



